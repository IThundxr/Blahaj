import dev.ithundxr.silk.ChangelogText

plugins {
    id 'maven-publish'
    id 'fabric-loom' version '1.4.+'
    id "me.modmuss50.mod-publish-plugin" version "0.3.4" // https://github.com/modmuss50/mod-publish-plugin
    id "dev.ithundxr.silk" version "0.11.16" // https://github.com/IThundxr/silk
}

version = mod_version
group = maven_group

repositories {
    maven { url = "https://maven.quiltmc.org/repository/release" } // QM
    maven { url = "https://maven.parchmentmc.org" } // Parchment
    maven { url = "https://maven.fabricmc.net/" } // FAPI, Loader
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"

    // layered mappings - Mojmap names, parchment and QM docs and parameters
    mappings(loom.layered {
        it.mappings("org.quiltmc:quilt-mappings:${minecraft_version}+build.${qm_version}:intermediary-v2")
        it.parchment("org.parchmentmc.data:parchment-${minecraft_version}:${parchment_version}@zip")
        it.officialMojangMappings { nameSyntheticMembers = false }
    })

    // Fabric Loader
    modImplementation "net.fabricmc:fabric-loader:${loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
}

publishMods {
    file = remapJar.archiveFile
    version = "$mod_version-fabric-mc$minecraft_version"
    changelog = ChangelogText.getChangelogText(project)
    type = STABLE
    displayName = "Bl√•haj Beyond  $mod_version for mc$minecraft_version"
    modLoaders.add("fabric")
    modLoaders.add("quilt")

    curseforge {
        projectId = curseforge_id
        accessToken = System.getenv("CURSEFORGE_TOKEN")
        minecraftVersions.add(minecraft_version)

        requires {
            slug = "fabric-api"
        }
    }

    modrinth {
        projectId = modrinth_id
        accessToken = System.getenv("MODRINTH_TOKEN")
        minecraftVersions.add(minecraft_version)

        requires {
            slug = "fabric-api"
        }
    }
}

processResources {
    Map<String, String> properties = Map.of(
            "version", version as String,
            "fabric_loader_version", loader_version,
            "fabric_api_version", fabric_version,
            "minecraft_version", minecraft_version
    )
    properties.forEach((k, v) -> inputs.property(k, v))

    filesMatching("fabric.mod.json") {
        expand properties
    }
}

def targetJavaVersion = 17
tasks.withType(JavaCompile).configureEach {
    it.options.encoding = "UTF-8"
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        it.options.release = targetJavaVersion
    }
}

java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
    archivesBaseName = project.archives_base_name
    withSourcesJar()
}

jar {
    from("LICENSE") {
        rename { "${it}_${archives_base_name}"}
    }
}
